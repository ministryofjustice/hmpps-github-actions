name: Security Trivy dependency check

on:
  workflow_call:
    inputs:
      channel_id:
        description: 'The slack channel ID to send a message on failure. If this is not provided then no message is sent.'
        required: false
        default: 'NO_SLACK'
        type: string
      subproject:
        description: 'For gradle multi module projects, leave blank for single module projects'
        required: false
        default: ''
        type: string
      ignore_unfixed:
        description: 'Asserts the Trivy scan to ignore vulnerabilities that have no current fix'
        required: false
        default: true
        type: boolean
      severity:
        description: 'Customisable severity levels'
        required: false
        default: 'HIGH,CRITICAL'
        type: string
      limit_severities_for_sarif:
        description: 'only includes severities as defined in the sarif file'
        required: false
        default: true
        type: boolean
    secrets:
      HMPPS_SRE_SLACK_BOT_TOKEN:
        description: 'Slack bot token'
        required: false

permissions:
  contents: read
  security-events: write

jobs:
  security-trivy-check:
    name: Security trivy dependency check
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
    - name: Check repository in helm_deploy/values.yaml
      id: check-package-repo
      run: |
        echo 'checking package repository for ${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject}}:'
        grep -rh 'repository: ' --include="values.yaml" | grep ${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject}} | head -n1 | awk -F'[:/ ]+' '{print "repo="$3"/"$4}' >> $GITHUB_ENV
    - name: Trivy Image Vulnerability Scanner
      id: trivy-analyse
      uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
      with:
        image-ref: "${{ env.repo }}/${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject}}:latest"
        severity: ${{ inputs.severity }}
        ignore-unfixed: ${{ inputs.ignore_unfixed }}
        skip-dirs: '/usr/local/lib/node_modules/npm'
        skip-files: /app/agent.jar
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 1
        limit-severities-for-sarif: ${{ inputs.limit_severities_for_sarif }}
      env:
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1
      continue-on-error: true
    # Upload the trivy results as an artifact in case the repo is private or internal
    - name: upload trivy artifact
      uses: actions/upload-artifact@v4
      id: trivy-upload-artifact
      with:
        name: trivy-check-${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject }}
        path: trivy-results.sarif
      continue-on-error: true
    # Upload Sarif file: this will attempt to upload the sarif file for private/internal repositories as well
    - name: Trivy upload sarif
      id: trivy-upload
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy-dependency-check
      # don't stop the job even if Github Advanced Security isn't enabled
      continue-on-error: true
    - name: Prepare Trivy summary
      id: trivy-summary
      run: |
        formatted_output=$(jq -r '.runs[0].results[] | [.ruleId, .message.text] | @tsv' trivy-results.sarif \
        | sed 's/\t/\\t/g' \
        | awk -F\| '{gsub("Package: ","("); gsub("Severity: ",""); print $1") - "$4}' \
        | awk '{printf "%s\\n", $0}')
        echo "Vulnerability Summary"
        echo "====================="
        echo "${formatted_output}" | sed 's/\\n/\n/g'
        echo "summary=$formatted_output | awk '{s=s $0} END {if (length(s) >= 3000) print substr(s, 1, 2997) "..."; else print s}'" >> $GITHUB_ENV
    - name: Trivy slack notification
      uses: ministryofjustice/hmpps-github-actions/.github/actions/slack_codescan_notification@feat/HEAT-512_results_in_slack # WORKFLOW_VERSION
      # uses: ministryofjustice/hmpps-github-actions/.github/actions/slack_codescan_notification@v2 # WORKFLOW_VERSION
      if: (failure() || steps.trivy-analyse.outcome == 'failure') && inputs.channel_id != 'NO_SLACK'
      with:
        title: "Trivy"
        warningOnly: ${{ steps.trivy-upload.outcome == 'success' }}
        channel_id: ${{ inputs.channel_id}}
        SLACK_BOT_TOKEN: ${{ secrets.HMPPS_SRE_SLACK_BOT_TOKEN }}
        subproject: ${{ inputs.subproject }}
        summary: "${{ env.summary }}"
