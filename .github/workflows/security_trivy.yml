name: Security Trivy dependency check

on:
  workflow_call:
    inputs:
      channel_id:
        description: 'The slack channel ID to send a message on failure. If this is not provided then no message is sent.'
        required: false
        default: 'NO_SLACK'
        type: string
      subproject:
        description: 'For gradle multi module projects, leave blank for single module projects'
        required: false
        default: ''
        type: string
      ignore_unfixed:
        description: 'Asserts the Trivy scan to ignore vulnerabilities that have no current fix'
        required: false
        default: true
        type: boolean
      severity:
        description: 'Customisable severity levels'
        required: false
        default: 'HIGH,CRITICAL'
        type: string
      limit_severities_for_sarif:
        description: 'only includes severities as defined in the sarif file'
        required: false
        default: true
        type: boolean
      slack_include_summary:
        description: 'boolean to include a summary of vulnerabilities in the Slack message'
        required: false
        default: true
        type: boolean
      scan_type:
        description: 'A scan type to use - either image (default) or fs'
        required: false
        default: 'image' # As per the Trivy inputs list https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs
        type: string      
      scanners:
        description: 'A comma-separated list of scanners to use to scan - used for filesystem scans'
        required: false
        default: 'misconfig,vuln,secret'
        type: string
      location:
        description: 'A location for IaC scans to take place'
        required: false
        default: '.'
        type: string        
    secrets:
      HMPPS_SRE_SLACK_BOT_TOKEN:
        description: 'Slack bot token'
        required: false

permissions:
  contents: read
  security-events: write

jobs:
  security-trivy-check:
    name: Security trivy dependency check
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      packages: read
      security-events: write
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
    - name: Check repository in helm_deploy/values.yaml
      id: check-package-repo
      run: |
        echo 'checking package repository for ${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject}}:'
        grep -rh 'repository: ' --include="values.yaml" | grep ${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject}} | head -n1 | awk -F'[:/ ]+' '{print "repo="$3"/"$4}' >> $GITHUB_ENV
     # run this scan for images  (default)
    - name: Trivy Image Vulnerability Scanner - image
      id: trivy-analyse-image
      uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
      if: inputs.scan_type == 'image'
      with:
        image-ref: "${{ env.repo }}/${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject}}:latest"
        severity: ${{ inputs.severity }}
        ignore-unfixed: ${{ inputs.ignore_unfixed }}
        skip-dirs: '/usr/local/lib/node_modules/npm'
        skip-files: /app/agent.jar
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 1
        limit-severities-for-sarif: ${{ inputs.limit_severities_for_sarif }}
      env:
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1
        # Set credentials only if using ghcr.io as the image registry
        TRIVY_USERNAME: ${{ startsWith(env.repo, 'ghcr.io/') && github.actor || '' }}
        TRIVY_PASSWORD: ${{ startsWith(env.repo, 'ghcr.io/') && secrets.GITHUB_TOKEN || '' }}
     # run this scan for filesystem scans
    - name: Trivy Image Vulnerability Scanner - filesystem
      id: trivy-analyse-fs
      uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
      if: inputs.scan_type == 'fs'
      with:
        severity: ${{ inputs.severity }}
        scan-type: ${{ inputs.scan_type }}
        scanners: ${{ inputs.scanners }}
        image-ref: ${{ inputs.location}}
        ignore-unfixed: ${{ inputs.ignore_unfixed }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 1
        limit-severities-for-sarif: ${{ inputs.limit_severities_for_sarif }}
      env:
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1
    # Upload the trivy results as an artifact in case the repo is private or internal
    - name: upload trivy artifact
      uses: actions/upload-artifact@v4
      id: trivy-upload-artifact
      with:
        name: trivy-check-${{ inputs.subproject == '' && github.event.repository.name || inputs.subproject }}
        path: trivy-results.sarif
    # Upload Sarif file: this will attempt to upload the sarif file for private/internal repositories as well
    - name: Trivy upload sarif
      id: trivy-upload
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy-dependency-check
      # don't stop the job even if Github Advanced Security isn't enabled
    - name: Prepare Trivy summary
      id: trivy-summary
      run: |
        results_count=$(jq '.runs[0].results | length' trivy-results.sarif)
        echo "Vulnerability Summary"
        echo "====================="

        if [ "$results_count" -gt 0 ]; then
          formatted_output=$(jq -r '.runs[0].results[] | 
            "\(.ruleId) - \(.message.text | gsub("Package: "; "(") | gsub("Severity: "; "") | gsub("\n"; " "))"' trivy-results.sarif)
          echo "${formatted_output}"
          slack_summary="$(echo "${formatted_output}" | awk '{s=s $0} END {if (length(s) >= 3000) print substr(s, 1, 2997) "..."; else print s}')"
        else
          echo "No vulnerabilities found"
          slack_summary="No vulnerabilities found"
        fi

        echo "summary=${slack_summary}" >> $GITHUB_ENV
    - name: Trivy slack notification
      uses: ministryofjustice/hmpps-github-actions/.github/actions/slack_codescan_notification@v2 # WORKFLOW_VERSION
      if: (failure() || steps.trivy-analyse-image.outcome == 'failure' || steps.trivy-analyse-fs.outcome == 'failure') && inputs.channel_id != 'NO_SLACK'
      with:
        title: "Trivy"
        warningOnly: ${{ steps.trivy-upload.outcome == 'success' }}
        channel_id: ${{ inputs.channel_id}}
        SLACK_BOT_TOKEN: ${{ secrets.HMPPS_SRE_SLACK_BOT_TOKEN }}
        subproject: ${{ inputs.subproject }}
        summary: ${{ inputs.slack_include_summary && env.summary || '' }}
