name: 'failure Slack message'
description: 'Sends a slack message based on a file uploaded'
inputs:
  input_file:
    description: "filename to be read into a string"
    required: true
    default: "results.txt"
  channel_id:
    description: "Slack channel to send to"
    required: true
  SLACK_BOT_TOKEN:
    description: "important slack token"
    required: true
runs:
  using: "composite"
  steps:
    - name: process slack message results # returns SLACK_TXT
      uses: ministryofjustice/hmpps-github-actions/.github/actions/slack_prepare_results@v2 # WORKFLOW_VERSION
      id: slack_message_result 
      with:
        input_file: ${{ inputs.input_file }}
    - uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
      with:
        channel-id: ${{ inputs.channel_id}}
        payload: |
          {
          "blocks": [
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": ":stop: Github Actions ${{ github.workflow }} - ${{ github.event.workflow_run.conclusion }}"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*${{ github.repository }}* ${{ github.workflow }} failed"
              },
              "accessory": {
                  "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "View job"
                },
                "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "Output: ```${{ steps.slack_message_result.outputs.SLACK_TXT }}```"
                }
              ]
            },
            {
              "type": "divider"
            }
          ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ inputs.SLACK_BOT_TOKEN }}