name: 'get the commit history'
description: 'Get the commits between the last deployment and the current one and send them to slack'
inputs:
  app_version:
    description: "version of the app being deployed"
    required: true
  environment:
    description: "deployment environment"
    required: true
  namespace:
    description: "Kubernetes namespace"
    required: true
  k8s_deployment_name:
    description: "Kubernetes deployment name"
    default: 'PROJECT_NAME'
    required: false
  changelog_git_paths:
    default: ""
    description: When set it will limit the file changes shown in the changelog to the specified paths only. This is useful for multi-project builds where otherwise it will show all changes from all projects.
    required: false

outputs:
  deployment_changelog:
    description: "The changelog for the deployment" 
    value: ${{ steps.get-deployment-changelog.outputs.DEPLOYMENT_CHANGELOG }}

runs:
  using: "composite"
  steps:
  - name: find the latest deployment_name
    id: get-deployment-changelog
    shell: bash
    run:
      | 
      echo "K8S_DEPLOYMENT_NAME=${{ inputs.k8s_deployment_name }}"
      echo "Cluster: ${{ inputs.namespace }}"
      echo "App version: ${{ inputs.app_version }}"
      echo "Changelog git paths: ${{ inputs.changelog_git_paths }}"
      echo "--------------------------------------------"
      echo "Processing the commit history..."
      if [[ "${{ inputs.k8s_deployment_name }}" == "PROJECT_NAME" ]]; then
        K8S_DEPLOYMENT_NAME="${{ github.event.repository.name }}"
      else
        K8S_DEPLOYMENT_NAME="${{ inputs.k8s_deployment_name }}"
      fi

      # initialise the changelog
      echo "Touching .deployment_changelog"
      touch /tmp/.dcl_a /tmp/.dcl_b /tmp/.dcl_c /tmp/.dlc_d
 
      CURRENT_COMMIT="$(echo "${{ inputs.app_version }}" | cut -d'.' -f3)" 
      K8S_PREVIOUS_APP_VERSION="$(kubectl get "deployment/${K8S_DEPLOYMENT_NAME}" --namespace="${{ inputs.namespace }}" -o=jsonpath='{.metadata.labels.app\.kubernetes\.io/version}' || true)"
      echo "CURRENT_COMMIT=${CURRENT_COMMIT}"
      echo "K8S_PREVIOUS_APP_VERSION=${K8S_PREVIOUS_APP_VERSION}"      

      if [[ "$K8S_PREVIOUS_APP_VERSION" == "" ]]; then
      # if no previous version was found, set to current commit minus 1
        echo "Previous deployment not found, showing current commit only." >> .deployment_changelog
        PREVIOUS_COMMIT="${CURRENT_COMMIT}^1"
      else
        PREVIOUS_COMMIT="$(echo "${K8S_PREVIOUS_APP_VERSION}" | cut -d'.' -f3)"
      fi
      echo "PREVIOUS_COMMIT=${PREVIOUS_COMMIT}"
      # Some apps may not have set the correct k8s label with a valid app version containing a sha1

      # Check $PREVIOUS_COMMIT sha1 is valid
      # Add the sed command to the end of this so it is only one line
      if git rev-parse --quiet --verify "${PREVIOUS_COMMIT}" &>/dev/null; then
        # Run the actual thing so we can see what it's doing
        echo "Found previous commit - now getting the diffs"
        echo "Processing change log using files"
        PAGER="cat" git log --oneline --no-decorate  --pretty=format:'%h %s (%cr)' --committer='noreply@github.com' --grep='#' "${PREVIOUS_COMMIT}..${CURRENT_COMMIT}" >> /tmp/.dcla
        echo "Deployment changelog file so far (/tmp/.dcl_a):"
        echo "------------------------------------------"
        cat /tmp/.dcl_a
        echo "------------------------------------------"
        cat /tmp/.dcl_a | sed 's/Merge pull request /PR /g; s|from ministryofjustice/dependabot/|:dependabot:|g; s|from ministryofjustice/||g'  > /tmp/.dcl_b
        echo "Deployment changelog file so far (/tmp/.dcl_b):"
        echo "------------------------------------------"
        cat /tmp/.dcl_b
        echo "------------------------------------------"
        cat /tmp/.dcl_b | tr '"' "'" | tr "\`" "'" > /tmp/.dcl_c
        echo "Deployment changelog file so far (/tmp/.dcl_c):"
        echo "------------------------------------------"
        cat /tmp/.dcl_c
        echo "------------------------------------------"
        cat /tmp/.dcl_c | sed ':a;N;$!ba;s/\n/\\n/g' > /tmp/.dcl_d
        echo "Deployment changelog file so far (/tmp/.dcl_d):"
        echo "------------------------------------------"
        cat /tmp/.dcl_d
        echo "------------------------------------------"       
        # Then load it into the variable
        echo "Loading the difference into DEPLOYMENT_CHANGELOG"
        DEPLOYMENT_CHANGELOG="$(cat /tmp/.dcl_d)"
        # Finally clear out the files
        rm -f /tmp/.dcl_*

        # Separate section to deal with the variable alternative
        echo "Processing change log using variables"
        dcl_a="$(git log --oneline --no-decorate  --pretty=format:'%h %s (%cr)' --committer='noreply@github.com' --grep='#' "${PREVIOUS_COMMIT}..${CURRENT_COMMIT}")"
        echo "dcl_a=${dcl_a}"
        dcl_b="$(echo "${dcl_a}" | sed 's/Merge pull request /PR /g; s|from ministryofjustice/dependabot/|:dependabot:|g; s|from ministryofjustice/||g')"
        echo "dcl_b=${dcl_b}"  
        dcl_c="$(echo "${dcl_b}" | tr '"' "'" | tr "\`" "'")"
        echo "dcl_c=${dcl_c}"
        dcl_d="$(echo "${dcl_c}" | sed ':a;N;$!ba;s/\n/\\n/g')"
        echo "dcl_d=${dcl_d}"
        echo "DEPLOYMENT_CHANGELOG could be: ${dcl_d}"

      else
        DEPLOYMENT_CHANGELOG="Changelog not available."
      fi
      echo "Here is the DEPLOYMENT_CHANGELOG: ${DEPLOYMENT_CHANGELOG}"  
      echo "------------------------------------------"
      echo "DEPLOYMENT_CHANGELOG=${DEPLOYMENT_CHANGELOG}"  >> $GITHUB_OUTPUT

